day 1：
采用actix_web框架进行开发。
async fn greet(req: HttpRequest)->impl  Responder{
    let name = req.match_info().get("name").unwrap_or("World");
    format!("Hello {}!", &name)
}
async fn add(req: HttpRequest)->impl  Responder{
    let a = req.match_info().get("a").unwrap_or("0").parse::<i32>().unwrap_or(0);
    let b = req.match_info().get("b").unwrap_or("0").parse::<i32>().unwrap_or(0);
    format!("Hello {}!", a+b)
}
这两个函数为异步函数，用来真正处理http请求的函数，例如一个请求“127.0.0.1：8080/liming”，该函数拿出“liming”
并返回，“127.0.0.1：8080/liming/1/2”，使用add函数进行处理，拿出“1”和“2”转化为i32并相加，返回。

#[tokio::main] //过程宏，因为async函数只能在async函数中调用，使用该过程宏，可以将main转化为“async函数”（实际上没有，之所产生了文本替换，使得他看起来像async）
async fn main() -> std::io::Result<()> {
    HttpServer::new(|| {
        App::new()
            .route("/", web::get().to(greet))
            .route("/{name}", web::get().to(greet))
            .route("/{name}/{a}/{b}", web::get().to(add))
    }).bind("127.0.0.1:8080")?
        .run()
        .await
}
HttpServer Server服务器 app 业务处理的对象，.route采用责任链的方式，调用合适的函数进行处理。

day2:
fn spawn_app(){
    let server = myweb::run().expect("Failed to bind address");
    let _ = tokio::spawn(server);
}
tokio::spawn是一个函数，用于在Tokio的运行时中启动一个新的异步任务。它接受一个实现了Future trait的参数，
并返回一个JoinHandle，这个JoinHandle可以用来等待这个异步任务完成或者获取其结果（如果有的话）。

#[tokio::test]
async fn health_check_works() {
    spawn_app();
    let client = reqwest::Client::new();
    let response = client
        .get("http://127.0.0.1:8000/health_check")
        .send()
        .await
        .expect("Failed to execute request");

    assert!(response.status().is_success());
    assert_eq!(Some(0), response.content_length());
}
产生一个服务器，并且用客户端去连接服务器，查看状态码，以及相应体是否为空

//health_check.rs
fn spawn_app()->String{
    let listener = TcpListener::bind("127.0.0.1:0")//绑定一个随机端口
        .expect("Failed to bind random port");
    let port = listener.local_addr().unwrap().port(); //获取该端口号
    let server = myweb::run(listener).expect("Failed to bind address");
    let _ = tokio::spawn(server);
    format!("http://127.0.0.1:{}", port)//返回地址
}

day3:
添加了init_db.sh脚本用来启动docker镜像
#lib.rs
#[derive(serde::Deserialize)]
struct FormData{
    email: String,
    name: String,
}
async fn subscribe(_form: web::Form<FormData>)->HttpResponse {
    HttpResponse::Ok().finish()
}


pub fn run(linstener: TcpListener)->Result<Server, std::io::Error> {
    let server = HttpServer::new(|| {
        App::new()
            .route("/", web::get().to(greet))
            .route("/health_check", web::get().to(health_check))
            .route("/subscriptions", web::post().to(subscribe))
            .route("/{name}", web::get().to(greet))
            .route("/{name}/{a}/{b}", web::get().to(add))
    })
        .listen(linstener)?
        .run();
    Ok(server)
}
to函数在执行subscribe之前，会构造_form: web::Form<FormData>，如果成功则调用该函数，
如果失败则返回一个错误马400， 在构造_form的时候，会使用http请求去构造该对象，同时被web::Form<>
包裹的对象需要实现序列化和反序列化，#[derive(serde::Deserialize)]则为其实现默认的序列化trait

day4：
添加了docker脚本，有问题。。。。。

day5：
解决docker问题

day6：
添加数据库 有问题。。。。。。
